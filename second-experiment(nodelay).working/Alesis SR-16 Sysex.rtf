{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f6\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 00020b05030304040402}Geneva;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f6\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 00020b05030304040402}Geneva;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f9\fs20\lang1033\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f9\lang1033\cgrid \sbasedon0 \snext15 endnote text;}{\s34\widctlpar\tqc\tx4320\tqr\tx8640\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f9\fs20\lang1033\cgrid \sbasedon0 \snext34 footer;}{\s43\li1440\ri-540\widctlpar\tx2160\tx6480\tx8910\aspalpha\aspnum\faauto\adjustright\rin-540\lin1440\itap0 \f7\fs20\lang1033\cgrid \sbasedon0 \snext43 First Page;}}{\info{\title ALESIS SR-16 MIDI SYSTEM}{\author Glenn Buckley}{\operator John Iversen}{\creatim\yr2005\mo7\dy27\hr21\min31}{\revtim\yr2005\mo7\dy27\hr21\min31}{\version2}{\edmins1}{\nofpages7}{\nofwords1979}{\nofchars11285}{\nofcharsws13858}{\vern16521}}\margt1350 \widowctrl\ftnbj\aendnotes\aftnrestart\makebackup\ftnnrlc\aftnnar\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\lytprtmet\hyphcaps0\formshade\horzdoc\fracwidth\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0\sectd \pgnrestart\linex0\colsx0\endnhere\sectdefaultcl {\footer \pard\plain \s34\widctlpar\tqr\tx8640\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f9\fs20\lang1033\cgrid {\f4 Alesis SR-16 MIDI System Exclusive format ________________________\tab }{\field{\*\fldinst {\f4 page}}{\fldrslt {\f4\lang1024 3}}}{\f4 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\li540\ri540\widctlpar\aspalpha\aspnum\faauto\adjustright\rin540\lin540\itap0 \f9\fs20\lang1033\cgrid {\b\f4\fs36\ul ALESIS SR-16 MIDI SYSTEM\par EXCLUSIVE FORMAT\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 The following information is provided as a guide for programmers wishing to modify the data received via MIDI from the SR-16 for the purpose of interchanging patterns from separate block dumps, modification of drum setups, MIDI channel assignments, etc.  Great care must be taken to insure that all modified addresses are valid, since one incorrect value (the length of a pattern, for example) could result in all data being lost in the SR-16.  These errors may not show up immediately, since the incorrect values may not be accessed by the SR-16 until a particular pattern or song is selected.  Therefore, it is recommended that any data manipulation programs be thoroughly tested after loading into the SR-16 by selecting and recording on many patterns and songs before assuming that the data is valid.\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par All 11 possible commands will be transmitted in the following format:\par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \widctlpar\tx1170\tx2610\tx6660\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24\ul HEX\tab \tab COMMENTS\tab \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 F0H\tab \tab SYSTEM EXCLUSIVE STATUS BYTE\par 00H, 00H, 0EH\tab ALESIS I.D. NUMBER\par 05H\tab \tab SR-16 I.D. NUMBER\par 00H-0AH\tab \tab SYSEX COMMAND\par ...\tab \tab DATA\par F7H\tab \tab EOX\par \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 The following sysex commands are transmitted and received by the SR-16:\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f4\fs24 00H\tab COMPLETE MEMORY DUMP\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 A system exclusive MIDI data dump from the SR-16 is initiated by pressing the BACKUP button, and then pressing the PLAY button.  This command is followed by a block of data representing the contents of the SR-16's memory.  In order to optimize the data transfer, 8 MIDI bytes are used to transmit each block of 7 SR-16 data bytes.  If the 7 data bytes are looked at as one 56-bit word, the format for transmission is eight 7-bit words beginning with the most significant bit of the first byte, as follows:\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }{\f4\fs24\ul \tab       SEVEN SR-16 BYTES:\tab \tab \par }\pard \li360\widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\f6\fs24 0:\tab A7 A6 A5 A4 A3 A2 A1 A0\par 1:\tab B7 B6 B5 B4 B3 B2 B1 B0\par 2:\tab C7 C6 C5 C4 C3 C2 C1 C0\par 3:\tab D7 D6 D5 D4 D3 D2 D1 D0\par 4:\tab E7 E6 E5 E4 E3 E2 E1 E0\par 5:\tab F7 F6 F5 F4 F3 F2 F1 F0\par 6:\tab G7 G6 G5 G4 G3 G2 G1 G0\par \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f6\fs24\ul \tab      TRANSMITTED AS:\tab \tab \par }\pard \li360\widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\f6\fs24 0:\tab  0 A7 A6 A5 A4 A3 A2 A1\par 1:\tab  0 A0 B7 B6 B5 B4 B3 B2\par 2:\tab  0 B1 B0 C7 C6 C5 C4 C3\par 3:\tab  0 C2 C1 C0 D7 D6 D5 D4\par 4:\tab  0 D3 D2 D1 D0 E7 E6 E5\par 5:\tab  0 E4 E3 E2 E1 E0 F7 F6\par 6:\tab  0 F5 F4 F3 F2 F1 F0 G7\par 7:\tab  0 G6 G5 G4 G3 G2 G1 G0\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1350\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 In order to use the data properly, it must be decoded properly into SR-16 byte format.  The following list gives the data locations within the "unpacked" (decoded) block of data, starting with the first byte of the block being 000.  NOTE:  All absolute addresses must have an offset of 8200H added to them (e.g., an absolute pointer to a pattern that starts at 35AH should have the pointer value 855AH).\par }\pard \li90\widctlpar\tx1350\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 000H-0C7H\tab DON'T CARE\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 0C8H\tab MIDI channel\par 0C9H\tab Receive MIDI drum triggers (0=off, 1=on vel 1, 2=on vel 2)\par 0CAH\tab Transmit MIDI drum triggers (0=off, 1=on)\par 0CBH\tab MIDI note assignment of KICK (0-127)\par 0CCH\tab MIDI note assignment of SNARE (0-127)\par 0CDH\tab MIDI note assignment of CLS HAT (0-127)\par 0CEH\tab MIDI note assignment of OPEN HAT (0-127)\par 0CFH\tab MIDI note assignment of CLAPS (0-127)\par 0D0H\tab MIDI note assignment of PERC 2 (0-127)\par 0D1H\tab MIDI note assignment of TOM 1 (0-127)\par 0D2H\tab MIDI note assignment of TOM 2 (0-127)\par 0D3H\tab MIDI note assignment of TOM 3 (0-127)\par 0D4H\tab MIDI note assignment of RIDE (0-127)\par 0D5H\tab MIDI note assignment of CRASH (0-127)\par 0D6H\tab MIDI note assignment of PERC 1 (0-127)\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 0D7H-0DBH\tab DON'T CARE\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 0DCH\tab MIDI THRU (0=off, 1=on)\par 0DDH\tab MIDI program select (0=off, 1=on)\par 0DEH\tab Clock mode (0=MIDI & internal, 1=internal only, 2=tape)\par 0DFH\tab MIDI clock out (0=off, 1=on)\par 0E0H\tab 0\par 0E1H\tab Click value\par 0E2H\tab 0\par 0E3H\tab Drumset mode (0=Pattern, 1=Manual)\par 0E4H\tab Pad dynamics (0-0AH)\par 0E5H\tab Version flag (0=1.00 thru 1.02, 1=1.03 and up)\par 0E6H\tab 1\par 0E7H\tab Note map (0=Normal, 1=00-09, 2=10-19, 3=20-29, 4=30-39, 5=40-49)\par 0E8H-F3H\tab DON'T CARE\par 0F4H\tab 0\par 0F5H-FDH\tab DON'T CARE\par 0FEH\tab 27H\par 0FFH\tab 0B5H\par \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 100H-1FFH\tab DON'T CARE\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 200H\tab MSB of absolute pointer to pattern 00A\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 201H\tab LSB of absolute pointer to pattern 00A\par 202H\tab MSB of absolute pointer to pattern 00B\par 203H\tab LSB of absolute pointer to pattern 00B\par 204H\tab MSB of absolute pointer to pattern 01A\par 205H\tab LSB of absolute pointer to pattern 01A\par   "\tab    "                 "              "        "\par 2C6H\tab MSB of absolute pointer to pattern 49B\par 2C7H\tab LSB of absolute pointer to pattern 49B\par 2C8H-2CCH\tab DON'T ALTER\par 2CDH\tab LSB of absolute pointer to first byte past SONG 99 data\par 2CEH\tab MSB of absolute pointer to first byte past SONG 99 data\par 2CFH-2D0H\tab DON'T ALTER\par 2D1H\tab LSB of FFFFH minus data in 0CDH & 0CEH\par 2D2H\tab MSB of FFFFH minus data in 0CDH & 0CEH\par 2D3H-2D4H\tab DON'T ALTER\par 2D5H\tab Shuffle amount (0-3, 0=OFF)\par 2D6H-2D7H\tab DON'T ALTER\par 2D8H\tab Tempo (20-255)\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 2D9H\tab Quant clock count (must correspond to Quant value 0-8: 96, 64, 48, 32, \tab 24, 16, 12, 8, 1)\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 2DAH\tab Quant value (0-8)\par 2DBH-2FFH\tab DON'T ALTER\par \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 300H-301H\tab DON'T ALTER\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 302H\tab MSB of absolute pointer to song 00\par 303H\tab LSB of absolute pointer to song 00\par 304H\tab MSB of absolute pointer to song 01\par 305H\tab LSB of absolute pointer to song 01\par 306H\tab MSB of absolute pointer to song 02\par 307H\tab LSB of absolute pointer to song 02\par   "\tab    "                 "              "        "\par 3C8H\tab MSB of absolute pointer to song 99\par 3C9H\tab LSB of absolute pointer to song 99\par 3CAH-3CCH\tab DON'T ALTER\par 3CDH-3D2H\tab DON'T CARE\par 3D3H-3D6H\tab DON'T ALTER\par 3D7H-3FFH\tab DON'T CARE\par \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 400H-4F6H\tab DON'T CARE\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 4F7H\tab Current drumset number (0-49 user, 64-113 preset)\par 4F8H-51BH\tab User drumset 00\par 51CH-53FH\tab User drumset 01\par 540H-563H\tab User drumset 02\par    "        " \tab    "\tab   "\tab "\par BDCH-BFFH  User drumset 49\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 C00H-?\tab PATTERN 00 DATA\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 The pattern and song data must be dealt with in a specific manner:\par \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 1)\tab All pattern and song data must be in consecutive order, i.e., pattern 05A data cannot be before pattern 02B's data.  The order for the data should be pattern 00A through 49B, followed by song 00 through 99.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 2)\tab If a pattern or song does not exist, its MSB pointer will = 0, which is an illegal pointer address.  Since there will be no data for this pattern, it is skipped, i.e., if pattern 04A is empty, pattern 04B's data follows after pattern 03B's data.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 3)\tab There can be no gaps in the data.  Pattern 01A's data must follow directly after pattern 00B's data, etc.\par 4)\tab Locations 2CDH-2CEH (start of free memory) and 2D1H-2D2H (length of free memory) must be kept valid.\par 5)\tab Song 99 MUST exist.  This means that at least an empty song (03H 00H FFH) must be at the end of memory, and song 99 must point to it.\par 6)\tab It is suggested that all DON'T CARE data be left in the state that it is received in, although these locations can be replaced with zeroes.\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\b\f4\fs24 PATTERN DATA FORMAT\par }{\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 The following is the format of each pattern, starting with the address pointed to by the absolute pointer to the pattern (offset by 8200H):\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par 00H\tab LSB of number of bytes in pattern, including header and fill\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 01H\tab MSB of number of bytes in pattern, including header and fill\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 02H\tab LSB of offset to start of fill (from location 03H)\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 03H\tab MSB of offset to start of fill (from location 03H)\par 04H\tab Length of pattern in beats (0-128)\par 05H\tab Drumset number assigned to pattern (0-49 user, 64-113 preset)\par 06H\tab Pattern name digit 1\par 07H\tab Pattern name digit 2\par 08H\tab Pattern name digit 3\par 09H\tab Pattern name digit 4\par 0AH\tab Pattern name digit 5\par 0BH\tab Pattern name digit 6\par 0CH\tab Pattern name digit 7\par 0DH\tab Pattern name digit 8\par 0EH-??\tab PATTERN DATA\par ??\tab 0FFH (End of pattern)\par ??-??\tab FILL DATA\par ??\tab 0FFH (End of fill)\par \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 Pattern data must follow these rules:\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 1)\tab Each byte of the pattern data (from 0EH on) is either a drum event, or a count of clocks to wait, or 0FFH, which indicates the end of the pattern.  If the event is a drum event, bit 7 will be 0, bits 4-6 will contain the dynamics of the note (0-7), and bits 0-3 will contain the drum to be played (0-11).  If the event is a count of clocks, bit 7 will be high, and bits 0-6 will indicate the number of clocks to wait (0-126).  A wait of 0 clocks is legal, and will cause the pointer to immediately advance to the next event.  An empty 8 beat pattern would consist of the following pattern data:  0FEH, 0FEH, 0FEH, 0FEH, 0FEH, 0FEH, 08CH, 0FFH.  This data will count clocks for 126*6+12 clocks (768 clocks, divided by 96 clocks per beat = 8 beats), afterwhich it will loop around since it has reached the end of the pattern.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 2)\tab The number of clocks in a fill pattern must equal the number of clocks in the main pattern.  For an empty 8 beat pattern, the above data would be repeated twice.\par 3)\tab Adding the number of bytes in a pattern to the absolute pointer of a pattern should point to 1 byte past the last byte of the pattern.\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\b\f4\fs24 DRUMSET DATA FORMAT\par }{\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 Each drumset contains 36 bytes; 3 bytes for each of 12 drums.  The 3 bytes are as follows:\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par Byte 0, bits 0-7\tab Sound number 0-232\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 Byte 1, bit 7\tab \tab Output select 0-1, 0=main outs\par Byte 1, bits 0-6\tab Volume 0-99\par Byte 2, bits 5-7\tab Panning 0-6, 0=left, 3=center, 6=right\par Byte 2, bits 3-4\tab Assignment mode 0-3, multi, single, group1, group2\par Byte 2, bits 0-2\tab Tuning 0-7, 0=-4, 4=0, 7=+3\par }{\b\f4\fs24 SONG DATA FORMAT\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 The following is the format of each song, starting with the address pointed to by the absolute pointer to the pattern (offset by 8200H):\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par 00H\tab LSB of number of bytes in song, including header\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 01H\tab MSB of number of bytes in song, including header\par 02H\tab Song name digit 1\par 03H\tab Song name digit 2\par 04H\tab Song name digit 3\par 05H\tab Song name digit 4\par 06H\tab Song name digit 5\par 07H\tab Song name digit 6\par 08H\tab Song name digit 7\par 09H\tab Song name digit 8\par 0AH\tab Song tempo (00=no tempo saved)\par 02H\tab Step 1 pattern number\par 03H\tab Step 1 fill start count lsb\par 04H\tab Step 1 fill start count msb\par 05H\tab Step 2 pattern number\par 06H\tab etc....\par xxH\tab Pattern number 0FFH (end of song)\par \par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 Song data must follow these rules:\par }\pard \li90\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin90\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 1)\tab There cannot be more than 254 steps in a song.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 2)\tab If a step's fill start count is FFFFH, the fill will not play.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 3)\tab The fill count represents the number of clocks that should occur before the fill begins playing -1.\par 4)\tab Adding the number of bytes in a song to the absolute pointer of a song should point to 1 byte past the last byte of the song.\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f4\fs24 05H\tab COPY PATTERN, DRUM, OR SONG\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab This command is used to copy a pattern to another pattern, a drum to a pattern, or a song to a song.  If the command is to copy a pattern, the data received will be appended to the end of the currently selected pattern.  If the command is to copy a song, the data received will be appended to the end of the currently selected song.  If the command is to copy a drum, the drum number sent in the mode byte (-1) will be copied to the drum button hit within 3 seconds of receiving this command, otherwise it will be ignored.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab 000000xxB\tab x:  MSB of number of unpacked bytes of data after header\line 0xxxxxxyB\tab y:  LSB of number of unpacked bytes of data after header\line 0yyyyyyyB\tab if y_0, then x=x+1\line 000nnnnnB\tab n:  copy mode: 0=copy patt, 1-12=copy drum, 17=copy song\line   |\tab \tab The data is packed as 8 MIDI bytes per 7 data bytes as described\line data\tab \tab above in the MIDI bulk dump explanation.  It contains a complete\line   |\tab \tab pattern or song.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab 00000000B\tab This extra byte is required for proper operation\line F7H\tab \tab EOX\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab When transmitting any copy function, it is recommended that a pause of one second be inserted between the copy mode byte and the data that follows it to insure that the receiving SR-16 has enough time to move memory around to make room for the new pattern or song.  In addition, it is recommended that a delay be added before sending additional MIDI commands, since it may take a few seconds for the copy operation to be complete, during which time MIDI data will be ignored.  The amount of time required will be dependent on the length of the patterns or songs being copied, and the amount of free memory available.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f4\fs24 07H\tab REQUEST SYSEX DUMP\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab This command is used to request a complete sysex memory dump from the SR-16.  After receiving this command (if not in PLAY mode), the SR-16 will send out its complete memory via MIDI.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par \tab F7H\tab \tab EOX\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f4\fs24 08H\tab RECEIVE DRUMSET DATA\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab This command is receive only, and is used to change the voice settings of the current drumset.  It can function while the pattern is playing, and will update the display if the settings being displayed are changed.  The format is two MIDI bytes per data byte, with the most significant data bit transmitted in bit 0 of the first MIDI byte, and data bits 0-6 transmitted in the second MIDI byte.  The data edits the currently selected drumset just as if it had been edited from the front panel.  This means that the changes will not be permanent unless the drumset is stored.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par \tab data\tab \tab 36 data bytes, transmitted as 72 MIDI bytes\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab F7H\tab \tab EOX\par \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f4\fs24 09H\tab MIDI COMMUNICATIONS TEST\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab This command is used to ensure that bidirectional MIDI communication is functioning.  If an SR-16 receives the inquiry command (F0H, 00H, 00H, 0EH, 01H, 09H, 00H, F7H), it will respond with the response command (F0H, 00H, 00H, 0EH, 01H, 09H, 01H, F7H) only if MIDI ECHO is turned off.  If MIDI ECHO is on, the transmitting device will see the inquiry message returned to it if bidirectional communication is functioning.  This function is useful in determining that the SR-16 is ready to receive additional MIDI information.  For example, selecting a pattern, or copying a pattern can cause a delay in which the SR-16 will ignore incoming MIDI information if its input buffer overflows.  By sending this command after a copy pattern command (command 5), and then waiting for the response before sending any additional commands, it can be insured that the SR-16 will not miss any information.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par \tab 0000000xB\tab x=0=MIDI inquiry, x=1=MIDI response\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab F7H\tab \tab EOX\par \par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\f4\fs24 0AH\tab REQUEST DRUMSET DATA\par }\pard \widctlpar\tx1350\tx2610\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \tab This command is used to request the current drumset data to be sent out MIDI.  After receiving this command, the SR-16 will send out the current drumset as described in command 8 above.\par }\pard \fi-360\li720\widctlpar\tx1530\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 {\f4\fs24 \par }\pard \widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f4\fs24 \tab F7H\tab \tab EOX\par }}