// Auto-generated. Do not edit.
#import "BuildFingerprint.h"
const char *BuildFingerprint = 
"=== Build Info ===\n"
"Timestamp: 2025-08-11 14:33:14\n"
"Branch: Delays\n"
"Commit: 8a13a5b â€” Real-time friendly MIDI logging and assert (with uncommitted changes)\n\n"
"Fingerprint (RNArchitectureDefines.h):\n\n"
"//\n"
"//  RNArchitectureDefines.h\n"
"//  RhythmNetwork\n"
"//\n"
"//  Created by John R. Iversen on 2025-06-26.\n"
"//\n"
"\n"
"// @BUILD_FINGERPRINT\n"
"\n"
"#ifndef RNArchitectureDefines_h\n"
"#define RNArchitectureDefines_h\n"
"\n"
"// ====== MIDI ======\n"
"#define kNumMIDIChans	16\n"
"#define kNumMIDINotes	128\n"
"\n"
"// Trigger to MIDI 'concentrators'\n"
"#define kNumConcentrators 4 // Max number of TMC-6 devices (based on available ports on MIOC\n"
"#define kNumInputsPerConcentrator 3 // TMC-6 has 6 inputs; 08/06/2025 change to 3 (for group of 6) to reduce congestion\n"
"\n"
"\n"
"// MIOC Ports\n"
"#define kBigBrotherPort 8 // MIOC port used to monitor all activity, deliver stimuli and program MIOC\n"
"#define kPatchThruPort 7  // MIOC port for adding varying velocity processors\n"
"#define kDelayPort 6	// MIOC port for delay messages\n"
"\n"
"// MIDI Channel & Note definitions NOTE: all of our 'channel' defintions are 1-based, so true MIDI channel is x-1\n"
"#define kBigBrotherControlChannel 1\n"
"#define kBigBrotherChannel 16\n"
"\n"
"// MIDI Constants\n"
"#define kBaseNote 64		// Tappers each identified with a unique note number beginning with this\n"
"#define kStimulusNoteVelocity	127 // Velocity for metronome events\n"
"\n"
"// CONFIGURATION\n"
"#define kDoEmitNoteOff FALSE // whether to send out note-off events\n"
"#define kNoteOffDelay_ms 200\n"
"\n"
"#define kSelfFeedbackNoDelayThroughMIOC TRUE //route self-feedback through MIOC, not CoreMIDI router, for reduced latency\n"
"\n"
"\n"
"// ====== Network Architecture =======\n"
"\n"
"// Maximum number of tappers\n"
"//#define kMaxNodes (255 - kBaseNote) //based on unique notes, but we are limited to midi channels and are further currently limited by the number of trigger-midi inputs to 12\n"
"#define kMaxNodes 16 // Maximum number of tappers\n"
"\n"
"// utilty\n"
"#define FEQ(a,b) fabs(a-b) < 1e9\n"
"\n"
"// Types\n"
"typedef UInt16 RNNodeNum_t; //TODO: consider making this float so I can add stim channel\n"
"\n"
"// Define mapping from node number (1-based) to port, channel, note\n"
"// as of July 2025, we're using channel = tapper ID and note is unique to node\n"
"// these don't do any bounds checking, but recal node 1->channel 0; node 0->kBigBrotherChannel (16)\n"
"\n"
"// port depends on how many tappers per trigger to MIDI device concentrated into a port. NB 1-based\n"
"static inline Byte portForNode(RNNodeNum_t node) {\n"
"	return (node == 0) ? kBigBrotherPort :\n"
"	((node-1) / kNumInputsPerConcentrator) + 1;\n"
"}\n"
"\n"
"// channel is the same as the port number for tappers. NB this is 0-based MIDI channel counting\n"
"static inline Byte channelForNode(RNNodeNum_t node) {\n"
"	return (node == 0) ? kBigBrotherChannel : node-1;\n"
"}\n"
"\n"
"// for now, all stimuli use same note, but could use notes below kBaseNote in future (e.g. noteForNode - (stimNo-1))\n"
"static inline Byte noteForNode(RNNodeNum_t node) {\n"
"	return (node == 0) ? kBaseNote :\n"
"	kBaseNote + node;\n"
"}\n"
"\n"
"//reverse lookup--channel completely determines the node (actually, only for tappers)\n"
"//static inline RNNodeNum_t nodeForChannel(Byte channel) {\n"
"//	return (channel==kBigBrotherChannel) ? 0 : channel+1;\n"
"//}\n"
"\n"
"//reverse lookup--Note completely determines the node (for tappers and BB)\n"
"static inline RNNodeNum_t nodeForNote(Byte note) {\n"
"	return note - kBaseNote;\n"
"}\n"
"\n"
"\n"
"#endif /* RNArchitectureDefines_h */\n"
;
